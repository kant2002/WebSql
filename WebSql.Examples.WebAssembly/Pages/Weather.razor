@page "/weather"
@inject HttpClient Http
@inject WebSqlInterop ExampleJsInterop

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th aria-label="Temperature in Celsius">Temp. (C)</th>
                <th aria-label="Temperature in Farenheit">Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        var database = await ExampleJsInterop.CreateDatabase();
        await database.ExecuteAsync("CREATE TABLE IF NOT EXISTS WeatherForecast (Id INTEGER PRIMARY KEY AUTOINCREMENT, Date TEXT, TemperatureC INTEGER, Summary TEXT);");
        await database.ExecuteAsync(
            @"INSERT INTO WeatherForecast(Date, TemperatureC, Summary) 
VALUES ('2022-01-06', 1, 'Feezing'), 
    ('2022-01-07', 14, 'Bracing'), 
    ('2022-01-08', -13, 'Feezing'), 
    ('2022-01-09', -16, 'Balmy'), 
    ('2022-01-10', -2, 'Chilly'),
    ('2022-01-11', -3, 'Chilly')");
        var result = await database.ExecuteAsync("SELECT * FROM WeatherForecast");
        if (result is { })
        {
            var resultset = result[0];
            Console.WriteLine(resultset.Values[0][0].GetType().FullName);
            Console.WriteLine(resultset.Values[0][1].GetType().FullName);
            Console.WriteLine(resultset.Values[0][2].GetType().FullName);
            Console.WriteLine(resultset.Values[0][3].GetType().FullName);
            forecasts = resultset.Values.Select(row => new WeatherForecast
                { 
                    Date = DateOnly.Parse(row[1]?.ToString() ?? ""), 
                    TemperatureC = int.Parse(row[2].ToString()!), 
                    Summary = row[3]?.ToString() 
                }).ToArray();
        }
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
